set nocompatible              " required
filetype off                  " required

" Remap <leader>
let mapleader=","


" set the runtime path to include vim-plug
call plug#begin('~/.vim/plugged')

" Declare the list of plugins here:
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' } " Fuzzy Search.
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex' " To create .tex file.
Plug 'itchyny/lightline.vim' " statusline/tabline for Vim
Plug 'glepnir/oceanic-material'  " Colorscheme
call plug#end()


" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
Plugin 'ycm-core/YouCompleteMe'
Plugin 'tmhedberg/SimpylFold' " Properly folds class and functions defs, leaving loops untouched.
Plugin 'vim-scripts/indentpython.vim'
Plugin 'dense-analysis/ale' " Linter
Plugin 'nvie/vim-flake8'       " Runs the currently open file through Flake8
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive' " Git wrapper
Plugin 'majutsushi/tagbar' " TagBar in the right of the window
Plugin 'godlygeek/tabular' " Markdown with Vim
Plugin 'plasticboy/vim-markdown' "Markdown with Vim
Plugin 'christoomey/vim-tmux-navigator'  " Move in panes vim-tmux
Plugin 'vimwiki/vimwiki'     " Vimwiki
Plugin 'octol/vim-cpp-enhanced-highlight' " Adds highlighting of (user defined) functions etc.
Plugin 'sirver/ultisnips'     " Snippets with UltiSnips
Plugin 'honza/vim-snippets' " Snippets are separated from the engine.
Plugin 'ryanoasis/vim-devicons'
Plugin 'junegunn/goyo.vim' " Writing in markdown full page
Plugin 'junegunn/limelight.vim' " Nice compatibility with goyo.
Plugin 'morhetz/gruvbox' " colorScheme
Plugin 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
Plugin 'preservim/nerdcommenter'
" ...


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" ===========================================
" ===========================================
" ============= GENERALES ===================
" ===========================================
" ===========================================

set splitbelow
set splitright
set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab


" Open Vim in same line number
" Acording to https://stackoverflow.com/questions/774560/in-vim-how-do-i-get-a-file-to-open-at-the-same-line-number-i-closed-it-at-last

if has("autocmd")
    au BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
endif



" ===========================================
" ===========================================
" ============= Back-End ====================
" =========== Python, C, C++, CUDA ==========
" ===========================================
" ===========================================

" Un pedo de tabs con makefiles segÃºn:
" https://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim/21323445#21323445
"
if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " Use actual tab chars in Makefiles.
    autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
endif


" Ale linter only when saving files
" let g:ale_lint_on_text_changed = 'never'
" Disale completion. Only completion from ycm
" let g:ale_completion_enabled=0


" =================
" === Python ======
" =================

"To add proper PEP 8 indentation.
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=120 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" Flagging Unnecesary Whitespace
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


" Make python code look pretty:
let python_highlight_all=1
syntax on


autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4


" =================
" ===== YCM =======
" =================
let g:ycm_use_ultisnips_completer = 1 " Default 1, just ensure
let g:ycm_complete_in_comments = 1 " Completion in comments
let g:ycm_complete_in_strings = 1 " Completion in string
let g:ycm_autoclose_preview_window_after_completion=1 " Autoclosing the preview window


nnoremap <leader>g :YcmCompleter GoTo<CR>


" python with virtualenv support and YCM
" See https://github.com/Valloric/YouCompleteMe#python-semantic-completion
"let g:ycm_python_interpreter_path = ''
"let g:ycm_python_sys_path = []
"let g:ycm_extra_conf_vim_data = [
"  \  'g:ycm_python_interpreter_path',
"  \  'g:ycm_python_sys_path'
"  \]
"let g:ycm_global_ycm_extra_conf = '~/.vim/.global_extra_conf.py'



" ==================
" === C/C++/Cuda ===
" ==================
" Security purposes
set exrc
set secure

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1



" ====================================
" ====================================
" ====================================
" == Tools, extras, Functionality ====
" ====================================
" ====================================
" ====================================


""""""""""""""""""""""""
"  Limelight and Goyo  "
""""""""""""""""""""""""
" gruvbox and limelight compatibility.
let g:limelight_conceal_ctermfg = 'gray'
" Goyo.vim integration with Limelight
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Goyo Configuration
let g:goyo_width="90%"
let g:goyo_height="90%"


" Enable folding
set foldmethod=indent
set foldlevel=99
let g:SimplyFold_docstring_preview=1

" Enable 256 colors in Vim
set t_Co=256

" Enable folding with the spacebar
nnoremap <space> za


"UTF-8 Support
set encoding=utf-8


" For Devicons we set a NerdFont
set guifont=Ubuntu\ Nerd\ Font\ Complete\ 11


"""""""""""""""""
"  ColorScheme  "
"""""""""""""""""
set background=dark
colorscheme oceanic_material


""""""""""""""""""""""
"  Correct spelling  "
""""""""""""""""""""""
setlocal spell spelllang=es,en_us
inoremap <C-f> <c-g>u<Esc>[s1z=`]a<c-g>u



" Line Numbering
set number
set relativenumber

" Set position on cursor
set ma
set cursorline

" Mouse support
set mouse=a



" =====================
" ==== ctags ==========
" =====================
" Adding ctags: 
if !empty($VIRTUAL_ENV)
    map <F8> :!ctags -R -f $VIRTUAL_ENV/tags $VIRTUAL_ENV/lib/python3.8/site-packages<CT>
    set tags=$VIRTUAL_ENV/tags
endif



" Vim sets working directoroy to the current file's directory:
autocmd BufEnter * lcd %:p:h


" map <F9> to NERDTreeToggle
nmap <F9> :NERDTreeToggle<CR>
" Ignore .pyc files in NERDtree
let NERDTreeIgnore=['\.pyc$', '\~$']


" TagBar
nmap <F5> :TagbarToggle<CR>

" ================
" == lightline ===
" ================

" Get Rid of -- INSERT --
set noshowmode

let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'samuel' ],
      \           ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'fugitive#head'
      \  },
      \ 'component': {
      \   'samuel': 'Samuel'
      \  },
      \ }

" ================
" === Vimwiki ====
" ================
filetype plugin on
let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax': 'markdown', 'ext': '.md'}]


" =============================
" ========= Latex =============
" ====== with vimtex ==========
" =============================
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1  " Hide code when your cursor is not in the line. 
let g:tex_conceal='abdmg' " Hide code when your cursor is not in the line.

" Be able to put code with minted
" https://github.com/lervag/vimtex/issues/467
"
let g:vimtex_compiler_latexmk = {
\ 'options' : [
\ '-pdf',
\ '--shell-escape',
\ '-verbose',
\ '-file-line-error',
\ '-synctex=1',
\ '-interaction=nonstopmode',
\ ],
\}



" =============================
" ========= UltiSnips =========
" =============================
" UltiSnips

let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/'
let g:UltiSnipsSnippetDirectories=["CustomSnips", "UltiSnips"]
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-l>"
