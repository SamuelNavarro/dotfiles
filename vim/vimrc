set nocompatible              " required by Vundle
filetype off                  " required by Vundle

" Remap <leader>
let mapleader=","

" Remap <localleader>
let maplocalleader=",,"

" set the runtime path to include vim-plug
call plug#begin('~/.vim/plugged')

" Declare the list of plugins here:
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --bin' } " Fuzzy Search.
Plug 'junegunn/fzf.vim'
Plug 'lervag/vimtex' " To create .tex file.
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'maxmellon/vim-jsx-pretty'
Plug 'yuezk/vim-js'
Plug 'vim-python/python-syntax'
call plug#end()

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim 
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
Plugin 'tmhedberg/SimpylFold' " Properly folds class and functions defs, leaving loops untouched.
Plugin 'vim-scripts/indentpython.vim'
Plugin 'nvie/vim-flake8'       " Runs the currently open file through Flake8
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-fugitive' " Git wrapper
Plugin 'majutsushi/tagbar' " TagBar in the right of the window
Plugin 'godlygeek/tabular' " Markdown with Vim
Plugin 'plasticboy/vim-markdown' "Markdown with Vim
Plugin 'christoomey/vim-tmux-navigator'  " Move in panes vim-tmux
Plugin 'octol/vim-cpp-enhanced-highlight' " Adds highlighting of (user defined) functions etc.
Plugin 'sirver/ultisnips'     " Snippets with UltiSnips
Plugin 'honza/vim-snippets' " Snippets are separated from the engine.
Plugin 'ryanoasis/vim-devicons'
" Plugin 'morhetz/gruvbox' " colorScheme
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'iamcco/markdown-preview.nvim'
Plugin 'preservim/nerdcommenter'
Plugin 'itchyny/lightline.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


" ===========================================
" ===========================================
" ============= GENERALES ===================
" ===========================================
" ===========================================
set splitbelow
set splitright
set tabstop=8 softtabstop=0 expandtab shiftwidth=2 smarttab

" Open Vim in same line number
" Acording to https://stackoverflow.com/questions/774560/in-vim-how-do-i-get-a-file-to-open-at-the-same-line-number-i-closed-it-at-last

if has("autocmd")
    au BufReadPost *
      \ if line("'\"") >= 1 && line("'\"") <= line("$") && &ft !~# 'commit'
      \ |   exe "normal! g`\""
      \ | endif
endif

" ====================
" ====================
" Coc completion
" ====================
" ====================


" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" ===========================================
" ===========================================
" ============= Back-End ====================
" =========== Python, C, C++, CUDA ==========
" ===========================================
" ===========================================
" Un pedo de tabs con makefiles seg√∫n:
" https://stackoverflow.com/questions/234564/tab-key-4-spaces-and-auto-indent-after-curly-braces-in-vim/21323445#21323445
"
if has("autocmd")
    " Use filetype detection and file-based automatic indenting.
    filetype plugin indent on

    " Use actual tab chars in Makefiles.
    autocmd FileType make set tabstop=8 shiftwidth=8 softtabstop=0 noexpandtab
endif

" =============================
" ==== http coc vim client ====
" =============================
noremap <Leader>h :CocCommand rest-client.request <cr>

" =================
" === Python ======
" =================
"To add proper PEP 8 indentation.
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=120 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

" Flagging Unnecesary Whitespace
highlight BadWhitespace ctermbg=green guibg=darkgreen
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


" Make python code look pretty:
autocmd BufRead,BufNewFile *.py let python_highlight_all=1
" let python_highlight_all=1
syntax on


autocmd FileType python set sw=4
autocmd FileType python set ts=4
autocmd FileType python set sts=4


" ==================
" === C/C++/Cuda ===
" ==================
" Security purposes
set exrc
set secure

let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_highlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_experimental_template_highlight = 1
let g:cpp_concepts_highlight = 1

" ====================================
" ====================================
" ====================================
" == Tools, extras, Functionality ====
" ====================================
" ====================================
" ====================================

" Enable folding
set foldmethod=indent
set foldlevel=99
let g:SimplyFold_docstring_preview=1

" Enable 256 colors in Vim
set t_Co=256

" Enable folding with the spacebar
nnoremap <space> za


"UTF-8 Support
set encoding=utf-8


" For Devicons we set a NerdFont
set guifont=Ubuntu\ Nerd\ Font\ Complete\ 11


"""""""""""""""""
"  ColorScheme  "
"""""""""""""""""
set background=dark
colorscheme PaperColor


""""""""""""""""""""""
"  Correct spelling  "
""""""""""""""""""""""
setlocal spell spelllang=es,en_us
inoremap <C-f> <c-g>u<Esc>[s1z=`]a<c-g>u


" Line Numbering
set number
set relativenumber

" Set position on cursor
set ma
set cursorline

" Mouse support
set mouse=a

" =====================
" ==== ctags ==========
" =====================
" Adding ctags: 
if !empty($VIRTUAL_ENV)
    map <F8> :!ctags -R -f $VIRTUAL_ENV/tags $VIRTUAL_ENV/lib/python3.8/site-packages<CT>
    set tags=$VIRTUAL_ENV/tags
endif

" Vim sets working directoroy to the current file's directory:
autocmd BufEnter * lcd %:p:h

" =====================
" ==== nerdtree =======
" =====================
nmap <F9> :NERDTreeToggle<CR>
" Ignore .pyc files in NERDtree
let NERDTreeIgnore=['\.pyc$']
" Exit Vim if NERDTree is the only window left.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() |
    \ quit | endif

" enable line numbers
let NERDTreeShowLineNumbers=1
" make sure relative line numbers are used
autocmd FileType nerdtree setlocal relativenumber

" TagBar
nmap <F5> :TagbarToggle<CR>

" ================
" == lightline ===
" ================

" Get Rid of -- INSERT --
set noshowmode
set laststatus=2
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified', 'samuel' ],
      \           ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \  },
      \ 'component': {
      \   'samuel': 'Samuel'
      \  },
      \ }


" =============================
" ========= Latex =============
" ====== with vimtex ==========
" =============================
let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1  " Hide code when your cursor is not in the line. 
let g:tex_conceal='abdmg' " Hide code when your cursor is not in the line.

" Be able to put code with minted
" https://github.com/lervag/vimtex/issues/467
"
let g:vimtex_compiler_latexmk = {
\ 'options' : [
\ '-pdf',
\ '--shell-escape',
\ '-verbose',
\ '-file-line-error',
\ '-synctex=1',
\ '-interaction=nonstopmode',
\ ],
\}


" =============================
" ========= UltiSnips =========
" =============================
let g:UltiSnipsSnippetsDir = '~/.vim/bundle/vim-snippets/'
let g:UltiSnipsSnippetDirectories=["CustomSnips", "UltiSnips"]
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-l>"
